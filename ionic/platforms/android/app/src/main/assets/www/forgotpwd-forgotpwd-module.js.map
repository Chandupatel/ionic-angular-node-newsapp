{"version":3,"sources":["webpack:///./src/app/forgotpwd/forgotpwd.module.ts","webpack:///./src/app/forgotpwd/forgotpwd.page.html","webpack:///./src/app/forgotpwd/forgotpwd.page.scss","webpack:///./src/app/forgotpwd/forgotpwd.page.ts"],"names":[],"mappings":"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","file":"forgotpwd-forgotpwd-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// import { FormsModule } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ForgotpwdPage } from './forgotpwd.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ForgotpwdPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ForgotpwdPage]\n})\nexport class ForgotpwdPageModule {}\n","module.exports = \"<ion-header>\\n\\t<ion-toolbar color=\\\"danger\\\">\\n\\t\\t<ion-buttons slot=\\\"start\\\" routerLink=\\\"/login\\\">\\n\\t\\t\\t<ion-icon name=\\\"arrow-round-back\\\" size=\\\"large\\\"></ion-icon>\\n\\t\\t</ion-buttons>\\n\\t\\t<ion-title>Forgot Password</ion-title>\\n\\t</ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n\\t<ng-template #temp>\\n\\n<form [formGroup]=\\\"formdata\\\" (ngSubmit)=\\\"continue(formdata.value)\\\">\\n\\t\\t<ion-item >\\n\\t\\t\\t<ion-label position=\\\"stacked\\\">Email:</ion-label>\\n\\t\\t\\t<ion-input formControlName=\\\"email\\\"></ion-input>\\n\\t\\t</ion-item>\\n\\n<div>\\n  <ng-container *ngFor=\\\"let validation of validation_messages.email\\\" >\\n    <div class=\\\"error-message\\\" *ngIf=\\\"\\n    formdata.get('email').hasError(validation.type) && (\\n    formdata.get('email').dirty || \\n    formdata.get('email').touched)\\\">\\n    <p>{{validation.message}}</p>\\n  </div>\\n</ng-container>\\n</div>\\n\\n\\n\\n<ion-item>\\n  <ion-label position=\\\"stacked\\\">Security Question:</ion-label>\\n  <ion-select formControlName=\\\"ques\\\">\\n    <ion-select-option value=\\\"city\\\">In what city were you born?</ion-select-option>\\n    <ion-select-option value=\\\"school\\\">What is the name of your first school?</ion-select-option>\\n    <ion-select-option value=\\\"movie\\\">What is your favorite movie?</ion-select-option>\\n    <ion-select-option value=\\\"color\\\">What is your favorite color?</ion-select-option>\\n  </ion-select>\\n</ion-item>\\n<div>\\n  <ng-container *ngFor=\\\"let validation of validation_messages.ques\\\" >\\n    <div class=\\\"error-message\\\" *ngIf=\\\"formdata.get('ques').hasError(validation.type)\\n    && (formdata.get('ques').dirty || formdata.get('ques').touched)\\\">\\n    <p>{{validation.message}}</p>\\n  </div>\\n</ng-container>\\n</div>\\n\\n\\n<ion-item>\\n    <ion-label position=\\\"stacked\\\">Answer:</ion-label>\\n<ion-input formControlName=\\\"ans\\\" id=\\\"security\\\" type=\\\"text\\\"></ion-input>\\n</ion-item>\\n\\n<div>\\n  <ng-container *ngFor=\\\"let validation of validation_messages.ans\\\" >\\n    <div class=\\\"error-message\\\" *ngIf=\\\"formdata.get('ans').hasError(validation.type)\\n    && (formdata.get('ans').dirty || formdata.get('ans').touched)\\\">\\n    <p>{{validation.message}}</p>\\n  </div>\\n</ng-container>\\n</div>\\n\\n\\t\\t <ion-button type=\\\"submit\\\" style=\\\"width:50%;\\\" color=\\\"danger\\\" [disabled]=\\\"!formdata.valid\\\">Continue</ion-button>\\n</form>\\n\\n\\t</ng-template>\\n\\n\\n\\t<ion-list *ngIf=\\\"data else temp\\\">\\n\\t\\t<b>Please enter a New Password</b>\\n\\n<form [formGroup]=\\\"formdata1\\\" (ngSubmit)=\\\"submit(formdata1.value)\\\">\\n\\n<div formGroupName=\\\"matching_passwords\\\">\\n\\n    <ion-item>\\n      <ion-label position=\\\"stacked\\\">New Password:</ion-label>\\n      <ion-input  id=\\\"pwd\\\" type=\\\"Password\\\" formControlName=\\\"pwd\\\"></ion-input>\\n    </ion-item>\\n\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.pwd\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"formdata1.get('matching_passwords').get('pwd').hasError(validation.type) && (formdata1.get('matching_passwords').get('pwd').dirty || formdata1.get('matching_passwords').get('pwd').touched)\\\">\\n           {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"stacked\\\">Confirm Password:</ion-label>\\n      <ion-input  id=\\\"confirm\\\" type=\\\"Password\\\" formControlName=\\\"confirm\\\"></ion-input>\\n    </ion-item>\\n\\n    <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.confirm\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"formdata1.get('matching_passwords').get('confirm').hasError(validation.type) && (formdata1.get('matching_passwords').get('confirm').dirty || formdata1.get('matching_passwords').get('confirm').touched)\\\">\\n         {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n    </div>\\n    <!-- These validations are for the form group -->\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.matching_passwords\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"\\n        formdata1.get('matching_passwords').hasError(validation.type) && (formdata1.get('matching_passwords').get('confirm').dirty || formdata1.get('matching_passwords').get('confirm').touched)\\\">\\n        {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\t\\t<ion-button type=\\\"submit\\\" style=\\\"width:50%;\\\" color=\\\"danger\\\" [disabled]=\\\"!formdata1.valid\\\">Change Password</ion-button>\\n</form>\\n\\n\\t</ion-list>\\n\\n</ion-content>\\n\"","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZm9yZ290cHdkL0Q6XFxjZGFjXFxuZXdzIGFwcFxcaW9uaWNcXG5ld3NhcHAvc3JjXFxhcHBcXGZvcmdvdHB3ZFxcZm9yZ290cHdkLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVFLFVBQVU7RUFDVixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvZm9yZ290cHdkL2ZvcmdvdHB3ZC5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXJyb3ItbWVzc2FnZVxyXG57XHJcbiAgY29sb3I6IHJlZDtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { S1Service } from '../s1.service';\nimport { ToastController } from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormControl,Validators } from '@angular/forms';\n\n@Component({\n\tselector: 'app-forgotpwd',\n\ttemplateUrl: './forgotpwd.page.html',\n\tstyleUrls: ['./forgotpwd.page.scss'],\n})\nexport class ForgotpwdPage implements OnInit {\n\n\tconstructor(private s1: S1Service,private toastctr:ToastController,\n\t\tprivate router: Router) { this.data=null}\n\t\n\tmatching_passwords_group = new FormGroup({\n\t\tpwd: new FormControl('', Validators.compose([\n\t\t\tValidators.minLength(4),\n\t\t\tValidators.required,\n\t\t\t// Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n\t\t\t])\n\t\t),\n\n\t\tconfirm: new FormControl('', Validators.required)\n\t}, \n\t(formGroup: FormGroup) => {\n\t\treturn this.areEqual(formGroup);\n\t});\n\n\tareEqual(formGroup: FormGroup) {\n\t\tlet pass = formGroup.get('pwd').value;\n\t\tlet confirmPass = formGroup.get('confirm').value;\n\t\treturn pass == confirmPass ? null : { areEqual: true }   \n\t}\n\n\n\n\n\tformdata = new FormGroup(\n\t{\n\t\t\n\t\temail: new FormControl('',Validators.required),\n\t\tques: new FormControl('',Validators.required),\n\t\tans: new FormControl('',Validators.required)\n\t\t\n\t} \n\t);\n\n\nformdata1 = new FormGroup(\n\t{\n\t\t\n\t\tmatching_passwords: this.matching_passwords_group\n\t} \n\t);\n\tvalidation_messages = {\n\n\t\t'email': [\n\t\t{ type: 'required', message: 'Email is required.' }\n\t\t],\n\n\t\t'ques': [\n\t\t{ type: 'required', message: 'Select a Security Question.' }\n\t\t],\n\n\t\t'ans': [\n\t\t{ type: 'required', message: 'Answer is required.' }\n\t\t],\n\n\n\t\t'pwd': [\n\t\t{ type: 'required', message: 'Password is required.' },\n\t\t{ type: 'minlength', message: 'Password must be at least 4 characters long.' },\n\t\t// { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n\t\t],\n\n\t\t'confirm':[\n\t\t{ type: 'required', message: 'Confirm Password is required.' }\n\t\t],\n\n\t\t'matching_passwords': [\n\t\t{ type: 'areEqual', message: 'Password mismatch.' }\n\t\t]\n\n\n\t}\n\n\n\temail;\n\n\tdata;\n\tcontinue(data)\n\t{\n\t\tthis.email=data.email;\n\t\tthis.s1.forgotpwd(data.email,data.ques,data.ans).subscribe((res:any)=>{\n\t\t\t// this.saved=res;\n\t\t\tconsole.log(res);\n\t\t\tif(res.length==0)\n\t\t\t{\n\n\t\t\t\tthis.toastControl(0);\n\t\t\t\tconsole.log(\"details does not match\");\n\t\t\t}\n\t\t\telse\n\t\t\t\tthis.data=1;\n\t\t\tthis.formdata.reset();\n\n\t\t});\n\t}\n\n\n\tsubmit(data)\n\t{\n\t\tthis.s1.changeForgtpwd(data.matching_passwords.pwd,this.email).subscribe((res:any)=>{\n\t\t\t//this.saved=res;\n\t\t\tthis.toastControl(1);\n\t\t\tconsole.log(res);\n\n\t\t\tthis.formdata.reset();\t\t\t\n\t\t\tthis.router.navigate(['/login']);\n\n\t\t});\n\n\t}\n\n\tasync toastControl(x) {\n\t\tif(x){\n\t\t\tconst toast = await this.toastctr.create({\n\t\t\t\tmessage: 'Password changed successfully!',\n\t\t\t\tduration: 2000\n\n\t\t\t});\n\t\t\tawait toast.present();\n\n\t\t}\n\t\telse{\n\t\t\tconst toast = await this.toastctr.create({\n\t\t\t\tmessage: 'Details does not match!',\n\t\t\t\tduration: 2000\n\n\t\t\t});\n\t\t\tawait toast.present();\n\n\t\t}\n\t\t\n\t\t\n\t\t\n\t}\n\n\tionViewWillEnter() {\n\t\tthis.data=null;\n\t}\n\tngOnInit() {\n\t}\n\n}\n"],"sourceRoot":""}